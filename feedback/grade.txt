
YOUR GRADE (out of 220): 180

(past midnight :-) but i do check all emails ... ok i was able to
patch up and get access to your github and your submission etc.  your
solution has a few issues, see below, but overall good.)

Below is latest output from when I run the test makefile on your
submission.

See the README file for general grading comments.

-----------------

gcc -g -O2 --std=c99 -Wall -o par_sumsq par_sumsq.c -lpthread
>>>> (creating test-01.txt)
==== Test 01 (baseline) ====
>>>> Result should be 14 2 1 3 in all cases
>>>> ... with 1 worker 'real' time should be ~7 seconds
time -p ./par_sumsq ./test-01.txt 1 2>&1
14 2 1 3
real 7.00
user 2.00
sys 0.00
>>>> ... with 2 workers 'real' time should be ~5 seconds
time -p ./par_sumsq ./test-01.txt 2 2>&1
14 2 1 3
real 5.00
user 0.00
sys 0.00
>>>> ... with 6 workers 'real' time should be ~5 seconds
time -p ./par_sumsq ./test-01.txt 6 2>&1
14 2 1 3
real 5.00
user 0.00
sys 0.00
>>>> (creating test-02.txt)
==== Test 02 (a little more stress) ====
>>>> Result should be 6 6 1 1 in all cases
>>>> ... with 1 worker 'real' time should be ~6 seconds
time -p ./par_sumsq ./test-02.txt 1 2>&1
6 6 1 1
real 6.00
user 3.00
sys 0.00
>>>> ... with 2 workers 'real' time should be ~4 seconds
time -p ./par_sumsq ./test-02.txt 2 2>&1
6 6 1 1
real 4.00
user 1.00
sys 0.00
>>>> ... with 6 workers 'real' time should be ~3 seconds
time -p ./par_sumsq ./test-02.txt 6 2>&1
6 6 1 1
real 3.00
user 0.00
sys 0.00
>>>> (creating test-03.txt)
==== Test 03 (lots of parallelism) ====
>>>> Result should be 110 6 1 5 in all cases
>>>> ... with 3 workers 'real' time should be ~12 seconds
time -p ./par_sumsq ./test-03.txt 3 2>&1
110 6 1 5
real 12.00
user 7.00
sys 0.00
>>>> ... with 5 workers 'real' time should be ~9 seconds
time -p ./par_sumsq ./test-03.txt 5 2>&1
==== Test 01 (baseline) ====
>>>> Result should be 14 2 1 3 in all cases
>>>> ... with 1 worker 'real' time should be ~7 seconds
time -p ./par_sumsq ./test-01.txt 1 2>&1
110 6 1 5
real 9.00
user 4.00
sys 0.00
>>>> ... with 12 workers 'real' time should be ~5 seconds
time -p ./par_sumsq ./test-03.txt 12 2>&1
110 6 1 5
real 5.00
user 0.00
sys 0.00
>>>> (creating test-04.txt)
==== Test 04 (a little funky) ====
>>>> Result should be 5 5 1 1 in all cases
>>>> ... with 1 workers 'real' time should be ~10 seconds
time -p ./par_sumsq ./test-04.txt 1 2>&1
14 2 1 3
real 7.00
user 2.00
sys 0.00
>>>> ... with 2 workers 'real' time should be ~5 seconds
time -p ./par_sumsq ./test-01.txt 2 2>&1
14 2 1 3
real 5.00
user 0.00
sys 0.00
>>>> ... with 6 workers 'real' time should be ~5 seconds
time -p ./par_sumsq ./test-01.txt 6 2>&1
5 5 1 1
real 10.00
user 0.00
sys 0.00
>>>> ... with 4 workers 'real' time should also be ~10 seconds
time -p ./par_sumsq ./test-04.txt 4 2>&1
14 2 1 3
real 5.00
user 0.00
sys 0.00
==== Test 02 (a little more stress) ====
>>>> Result should be 6 6 1 1 in all cases
>>>> ... with 1 worker 'real' time should be ~6 seconds
time -p ./par_sumsq ./test-02.txt 1 2>&1
6 6 1 1
real 6.00
user 3.00
sys 0.00
>>>> ... with 2 workers 'real' time should be ~4 seconds
time -p ./par_sumsq ./test-02.txt 2 2>&1
5 5 1 1
real 10.00
user 0.00
sys 0.00
>>>> ... huh, with 1000 workers 'real' time should still be ~10 seconds
time -p ./par_sumsq ./test-04.txt 1000 2>&1
6 6 1 1
real 4.00
user 1.00
sys 0.00
>>>> ... with 6 workers 'real' time should be ~3 seconds
time -p ./par_sumsq ./test-02.txt 6 2>&1
6 6 1 1
real 3.00
user 0.00
sys 0.00
==== Test 03 (lots of parallelism) ====
>>>> Result should be 110 6 1 5 in all cases
>>>> ... with 3 workers 'real' time should be ~12 seconds
time -p ./par_sumsq ./test-03.txt 3 2>&1
5 5 1 1
real 10.07
user 0.01
sys 0.09
>>>> ... (you will have more overhead, but should still be just above 10 sec)
==== ... all tests done
==== (all done) ====
110 6 1 5
real 12.00
user 7.00
sys 0.00
>>>> ... with 5 workers 'real' time should be ~9 seconds
time -p ./par_sumsq ./test-03.txt 5 2>&1
110 6 1 5
real 9.00
user 4.00
sys 0.00
>>>> ... with 12 workers 'real' time should be ~5 seconds
time -p ./par_sumsq ./test-03.txt 12 2>&1
110 6 1 5
real 5.00
user 0.00
sys 0.00
==== Test 04 (a little funky) ====
>>>> Result should be 5 5 1 1 in all cases
>>>> ... with 1 workers 'real' time should be ~10 seconds
time -p ./par_sumsq ./test-04.txt 1 2>&1
5 5 1 1
real 10.00
user 0.00
sys 0.00
>>>> ... with 4 workers 'real' time should also be ~10 seconds
time -p ./par_sumsq ./test-04.txt 4 2>&1
5 5 1 1
real 10.00
user 0.00
sys 0.00
>>>> ... huh, with 1000 workers 'real' time should still be ~10 seconds
time -p ./par_sumsq ./test-04.txt 1000 2>&1
5 5 1 1
real 10.07
user 0.01
sys 0.08
>>>> ... (you will have more overhead, but should still be just above 10 sec)
==== ... all tests done
==== (all done) ====
